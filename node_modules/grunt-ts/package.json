{
  "author": {
    "name": "basarat"
  },
  "name": "grunt-ts",
  "description": "Compile and manage your TypeScript project",
  "version": "1.1.7",
  "homepage": "https://github.com/basarat/grunt-ts",
  "repository": {
    "type": "git",
    "url": "git@github.com:basarat/grunt-ts.git"
  },
  "bugs": {
    "url": "https://github.com/basarat/grunt-ts/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/basarat/grunt-ts/blob/master/LICENSE"
    }
  ],
  "main": "grunt.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "typescript": "0.9.1",
    "chokidar": "0.6.2",
    "shelljs": "0.1.4",
    "underscore": "1.5.1",
    "underscore.string": "2.3.3"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-watch": "~0.5.1",
    "grunt-contrib-nodeunit": "~0.1.2"
  },
  "optionalDependencies": {},
  "keywords": [
    "gruntplugin",
    "typescript"
  ],
  "readme": "grunt-ts\r\n================\r\nWritten from scratch TypeScript compiler task for GruntJS. \r\n\r\nIt differs from grunt-typescript and following are the reasons why it was created. \r\n\r\n- This is written in [clear TypeScript code](https://github.com/basarat/grunt-ts/blob/master/tasks/ts.ts)\r\n- Gives a typescript development workflow in addition to simple file compilation. \r\n- Super simple to update to the [latest version of the typescript](https://github.com/basarat/grunt-ts/commit/6636f95b9d45b69e64771c603d3b08ec829e01e6)\r\n\r\nComes with a video introduction : http://youtu.be/Km0DpfX5ZxM , \r\nIf you already know grunt then skip to http://youtu.be/Km0DpfX5ZxM?t=11m16s\r\n\r\nFollowing are some key features: \r\n======================\r\n\r\n###Compiler support \r\nSupports all important compiler flags: \r\n\r\n- es3/es5\r\n- commonjs/amd\r\n- sourcemaps\r\n- declaration\r\n- comments\r\n\r\nCan also do js *file concatenation* using `--out`. For file ordering look at Javascript Generation below. \r\n\r\n\r\n###Reference file generation \r\nCan generate a reference.ts file for you which contains a reference to all your ts files.\r\nThis means you never need to cross reference files manually. Just reference `reference.ts` :) \r\n\r\n\r\n####Javascript generation and ordering\r\nAlso if you specify both an out js file via `out` && a reference file via `reference` \r\nit uses the generated reference file to *order the code in the generated javascript*. \r\n\r\nIn your `reference.ts` file you can specify the order for the few files you care about\r\nand leave the rest to be maintained by grunt-ts. \r\nE.g. in the following case the generated javascript for `someBaseClass.ts` is guaranteed to be at the top,\r\nand the generated javascript for  `main.ts`is guaranteed to be at the bottom of the single merged js file. \r\nEverything between `grunt-start` and `grunt-end` is generated and maintained\r\nfor you. If there is no `grunt-start` section found, it is created for you. If `reference.ts` does not \r\nexist originally, it is created for you. \r\n\r\n```typescript\r\n\r\n/// <reference path=\"someBaseClass.ts\" />\r\n\r\n// You can even put comments here and they are preserved\r\nvar orEvenCode = 123; // That you want to come before or after all your files\r\n\r\n//grunt-start\r\n/// <reference path=\"autoreference.ts\" />\r\n/// <reference path=\"someOtherFile.ts\" />\r\n//grunt-end\r\n\r\n\r\n/// <reference path=\"main.ts\" />\r\n```\r\n\r\n###Html 2 TypeScript support \r\nCan reencode html files into typescript and makes them available as a variable. e.g.\r\na file called `test.html` containing\r\n```html\r\n<div> Some Content </div>\r\n```\r\nis compiled to a typescript file `test.html.ts` containing: \r\n```typescript\r\nmodule test { export var html =  '<div> Some content </div>' } \r\n``` \r\nso that you can use use the variable `test.html` within your typescript to get the content of test.html \r\nas a string. The motivatation is to remove http requests to load templates in various front end frameworks. \r\n\r\n####Html 2 TypeScript usage in AngularJS \r\nThis is great for putting variables in templateCache : http://docs.angularjs.org/api/ng.$templateCache \r\nor even using the html string directly by setting it to the `template` properties (directives/views) instead of `templateUrl`\r\n\r\n####Html 2 TypeScript usage in EmberJS\r\nYou can specify this string to the template on a view : http://emberjs.com/api/classes/Ember.View.html \r\nSpecifically: http://stackoverflow.com/a/9867375/390330\r\n\r\n###Live file watching and building\r\nCan watch a directory for you and recompile your typescript files when any typescript file changes, gets added, gets removed. \r\nThis makes sure your project is always build ready :) \r\n\r\n\r\nnpm install\r\n======================\r\n\r\nThe npm package is available here : https://npmjs.org/package/grunt-ts\r\n\r\n## Configuration Documentation\r\nAfter you have grunt installed, you can install `grunt-ts` first:\r\n\r\n    npm install grunt-ts\r\n\r\nThen modify your `Gruntfile.js` file by adding the following line:\r\n\r\n    grunt.loadNpmTasks('grunt-ts');\r\n\r\nThen add some configuration for the plugin like so:\r\n\r\n    grunt.initConfig({\r\n        ...\r\n        ts: {            \r\n            dev: {                          // a particular target   \r\n                src: [\"test/work/**/*.ts\"], // The source typescript files, http://gruntjs.com/configuring-tasks#files\r\n                html: [\"test/work/**/*.tpl.html\"], // The source html files, https://github.com/basarat/grunt-ts#html-2-typescript-support\r\n                reference: \"./test/reference.ts\",  // If specified, generate this file that you can use for your reference management\r\n                out: 'test/out.js',         // If specified, generate an out.js file which is the merged js file                     \r\n                watch: 'test',              // If specified, watches this directory for changes, and re-runs the current target  \r\n                options: {                    // use to override the default options, http://gruntjs.com/configuring-tasks#options\r\n\t\t\t\t\ttarget: 'es3',            // 'es3' (default) | 'es5'\r\n\t\t\t\t\tmodule: 'commonjs',       // 'amd' (default) | 'commonjs'\r\n\t\t\t\t\tsourcemap: true,          // true  (default) | false\r\n\t\t\t\t\tdeclaration: false,       // true | false  (default)                \r\n\t\t\t\t\tcomments: false           // true | false (default)\r\n\t\t\t\t},\r\n            },\r\n            build: {                        // another target \r\n                src: [\"test/work/**/*.ts\"],\r\n                options: {                  // overide the main options for this target \r\n                    sourcemap: false,\r\n                }\r\n            },\r\n        },\r\n        ...\r\n    });\r\n    \r\nYou can see a sample grunt file here : https://github.com/basarat/grunt-ts/blob/master/Gruntfile.js\r\n   \r\n### Different configurations per target   \r\nConfiguration options are per target. You can see how you can have one set of default options and then override\r\nthese selectively for a target (e.g `build` , `dev`, `staging` etc).\r\nThis is provided by grunt : http://gruntjs.com/configuring-tasks#options\r\n\r\n### Awesome file globs\r\nYou can do pretty fancy stuff with your src file selection. \r\nAgain provided by grunt : http://gruntjs.com/configuring-tasks#files\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-ts@1.1.7",
  "dist": {
    "shasum": "9bf1f0ecec7f35fb82890fd2541ee459d9b6f42e"
  },
  "_from": "grunt-ts@1.1.7",
  "_resolved": "https://registry.npmjs.org/grunt-ts/-/grunt-ts-1.1.7.tgz"
}
